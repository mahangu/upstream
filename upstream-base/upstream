#!/usr/bin/python
#
# Upstream - log file aggregator and report tool for *nix systems.
# Copyright (C) 2006  Mahangu Weerasinghe (mahangu@gmail.com)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import dialog, sys, os, optparse, ConfigParser, gettext, locale
from getpass import getuser

config = ConfigParser.ConfigParser()
config.readfp(open('../conf/upstream.conf'))
libsdir = config.get("paths","libsdir")

sys.path.append(libsdir)

locale_app = config.get("main","locale_app")
locale_dir = config.get("paths","localedir")

import submitmoduleloader, logmoduleloader, moduleloader, uconf
from util import make_log_tuple

submit_module_default = config.get("main", "submit_module_default")

confdir = config.get("paths","confdir")

gettext.install(locale_app, locale_dir, unicode=1)

def main():
	d = dialog.Dialog(dialog="dialog")
	d.add_persistent_args(["--backtitle", "Upstream Log Transfer System"])
	
	#Step 1
	d.msgbox(_("This program will assist you in sending troubleshooting data to support personnel."))
	
	#Step 2
	nickname = getuser()
	upnickname = ""
	
	while upnickname == "":
		(code, upnickname) = d.inputbox(_("Please enter your name."), init="%s"%(nickname))
		
		if upnickname == "":
			d.msgbox(_("Sorry, but you didn't specify a name to use. Please try again, or hit CTRL+C to exit this program."))
			
	nickname = upnickname

	
	#Step 3
	log_modules.join()
	catchoices = []
	
	for cat in log_modules.getCategories():	
		catentry = (cat, "", 0)
		catchoices.append(catentry)
	
	
	log_tuple = []
		
	while log_tuple == []:
		(code, categories) = d.checklist(text=_("What are you having trouble with?"),
					height=15, width=54, list_height=7, 
					choices=catchoices,
					title=_("Problem Description"))
		
		
		
		mods = log_modules.getUniqueModulesInCategories(categories)
		nt_logmods = []
		t_logmods = []
		
		# Locate untrusted modules
		for m in mods:
			if m.trust_level != moduleloader.HASH_TRUSTED:
				nt_logmods.append(m)
			else:
				t_logmods.append(m)
				
		if len(nt_logmods) > 0:		
			nt_lognames = [n.module_name for n in nt_logmods]
			n_code, n_categories = d.checklist(text=_("The following modules cannot be verified as secure. If you would like to use the specified module anyway, put a check by it"), height=15, width=54, list_height=7, choices = nt_lognames, title=_("Use Unsecure Modules"))
			for nt in nt_logmods:
				if nt.module_name in n_categories:
					t_logmods.append(nt)
			mods = t_logmods
				
				
		log_tuple = make_log_tuple(mods)
			
		
		
		if log_tuple == []:
			d.msgbox(_("Sorry, but you didn't specify even one category to load logs from. Please try again, or hit CTRL+C to exit this program."))
		
	
	(code, description) = d.inputbox(_("Please enter a short description of the problem."), init="")
	

	#Step 4
	submit_modules.join()
	modchoices = []
	
	for mod in submit_modules:
		if mod.module_name == submit_module_default:
			modbool = 1
		else:
			modbool = 0
		
		modentry = (mod.module_name, "", modbool)
		modchoices.append(modentry)
		print modentry
	
	pastebin = ""
	
	while pastebin == "":
		(code, pastebin) = d.radiolist(text=_("Please select a server to submit to."),
                	                  height=15, width=54, list_height=7, 
                        	          choices=modchoices,
                                	  title=_("Submit"))
		if pastebin == "":
			d.msgbox(_("Sorry, but you didn't specify a server to submit to. Please try again, or hit CTRL+C to exit this program."))
				  
	
	print pastebin
	
	submit_module = submit_modules[pastebin]
	
	print submit_module
	
	submit_module.execute(nickname, description, log_tuple)
	
def cli(options,args):
	
	log_modules.join()
	submit_modules.join()
	
	print os.isatty(sys.stdin.fileno())
	
	if os.isatty(sys.stdin.fileno()) == False:
		stdinput = sys.stdin.read()
		print stdinput
		log_tuple = (("stdin","stdin",stdinput), )
	
	else:
		log_tuple = []
			
		optnumber = 0	
		
		for x in options.__dict__.iteritems():
			option = x[0]
			on = x[1]
						
			# Is there a nicer way to do this?
			if on and option != "pastebin" and option != "log":
				
				print option
				
				category = log_modules.getModulesInCategory(option)
				
				for log_module in category:
					log_tuple = make_log_tuple(category)
							
				optnumber = optnumber + 1
			
			elif options.log:
				category = log_modules.getModulesInCategory(option)
				log_tuple = make_log_tuple(category)
			
				optnumber = optnumber + 1
				options.log = False
		
		# Check to see if all mandatory arguments have been filled.
		
				print _("%s log file(s) have been read.")%(optnumber)
				
				if optnumber < 1:
					print _("Please specify a log option. You haven't asked me to send anything. See help (-h) for more information.")
					sys.exit(1)
				
	if options.pastebin:
			submit_module = submit_modules[options.pastebin]
	else:
			submit_module = submit_modules[submit_module_default]
	
	if len(args) != 2:
		print _("Please specify the required options. See help (-h) for more information.")
		sys.exit(1)
	
	
	#  Populating final variables.
	
	user_email = args[0]
	user_message = args[1]
	
	print user_message
	print user_email
	
	#user_logs = functions.get_final()
	
	submit_module.execute(user_email, user_message, log_tuple)
	
	
		
		
if __name__ == "__main__": 
	
	l_config = uconf.PluginConfigReader(uconf.LOG, confdir)
	log_modules = logmoduleloader.LogModuleLoader(l_config, True, 0)

	s_config = uconf.PluginConfigReader(uconf.SUBMIT, confdir)
	submit_modules = submitmoduleloader.SubmitModuleLoader(s_config, True, 0)
	
	parser = optparse.OptionParser(_("%prog yourname \"Your support message\" [options]. If no arguments are supplied, Upstream will go in to wizard mode."))
	
	log_modules.join()
	
	categories = log_modules.getCategories()
	
	for category in categories:
		lflag = "--%s"%(category)
		# debug print
		#print lflag

		parser.add_option("", lflag, action="store_true", help=_("All log modules in the %s category.")%(category), default=False)

	parser.add_option("", "--pastebin", dest="pastebin", help=_("Specify a pastebin module to use."), default=False)

	parser.add_option("", "--log", dest="log", help=_("Choose a specific a log module to use."), default=False)

	(options, args) = parser.parse_args()
	
	
	if args == []:
		main()
	else:
		cli(options,args)
	

